{"version":3,"sources":["pages/QuotePage.js","App.js","serviceWorker.js","index.js"],"names":["QuotePage","props","getCorrectProps","params","location","search","String","queryString","parse","getMeta","quoteObject","Helmet","author","name","content","quote","property","authorImage","state","quoteArray","date","this","setState","id","parseInt","length","console","log","e","error","Math","floor","random","className","style","fontFamily","src","alt","Component","App","path","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"w3CAgGeA,E,kDA1FX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAmCVC,gBAAkB,WACd,IAAIC,EAAS,EAAKF,MAAMG,SAASC,OAMjC,OALIF,GAEyB,kBAAXA,GAAuBA,aAAkBG,UACvDH,EAASI,IAAYC,MAAML,IAF3BA,EAAS,GAINA,GA3CQ,EA8CnBM,QAAU,SAACC,GACP,OACI,kBAACC,EAAA,EAAD,KACI,+BAAQD,EAAYE,OAAS,kBAC7B,0BACIC,KAAK,cACLC,QAAS,SAAMJ,EAAYK,MAAQ,WAEvC,0BACIC,SAAS,WACTF,QAASJ,EAAYE,OAAS,WAElC,0BACII,SAAS,WACTF,QAASJ,EAAYO,gBA1DjC,EAAKC,MAAQ,CACTC,WAAY,GACZT,YAAa,CACTO,YAAa,2GACbF,MAAO,QACPH,OAAQ,SACRQ,KAAM,YARC,E,gEAaE,IAAD,OAChBC,KAAKC,SAAS,CACVH,WAAYA,IACb,WACC,IACI,IAAII,EAAK,EAAKrB,kBAAkBqB,GAChC,GAAIA,GAAMC,SAASD,GAAM,EAAKL,MAAMC,WAAWM,OAK3C,OAJAC,QAAQC,IAAI,qBACZ,EAAKL,SAAS,CACVZ,YAAaS,EAAWI,KAIlC,MAAOK,GACLF,QAAQG,MAAM,eAElBH,QAAQC,IAAI,eACZ,EAAKL,SAAS,CACVZ,YAAaS,EAAWW,KAAKC,MAAMD,KAAKE,SAAW,EAAKd,MAAMC,WAAWM,gB,+BAoCjF,OACI,yBAAKQ,UAAU,MAAMC,MAAO,CAACC,WAAY,UAErC,4BAAQF,UAAU,cAEVZ,KAAKH,MAAMR,YAAYO,aACvB,yBAAKmB,IAAKf,KAAKH,MAAMR,YAAYO,YAAagB,UAAU,WAAWI,IAAKhB,KAAKH,MAAMR,YAAYE,SAEnG,oCAAKS,KAAKH,MAAMR,YAAYK,MAA5B,UAEIM,KAAKH,MAAMR,YAAYE,QACvB,kCAAQS,KAAKH,MAAMR,YAAYE,QAG/BS,KAAKH,MAAMR,YAAYU,MACvB,8BAAOC,KAAKH,MAAMR,YAAYU,Y,GAnF9BkB,a,eCYTC,E,uKAVP,OACI,kBAAC,IAAD,KACI,6BACI,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAWzC,U,GAL7BsC,aCOEI,QACW,cAA7BC,OAAOvC,SAASwC,UAEe,UAA7BD,OAAOvC,SAASwC,UAEhBD,OAAOvC,SAASwC,SAASC,MACvB,2DCXNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDwHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA5B,GACLH,QAAQG,MAAMA,EAAM6B,c","file":"static/js/main.680bd74d.chunk.js","sourcesContent":["import React, {Component} from \"react\";\nimport queryString from \"query-string\";\nimport quoteArray from '../resources/quotes'\nimport { Helmet } from \"react-helmet\";\n\nclass QuotePage extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            quoteArray: [],\n            quoteObject: {\n                authorImage: \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d1/Portrait_Gandhi.jpg/1200px-Portrait_Gandhi.jpg\",\n                quote: \"hello\",\n                author: \"AgentP\",\n                date: \"21 june\"\n            }\n        };\n    }\n\n    componentDidMount() {\n        this.setState({\n            quoteArray: quoteArray\n        }, () => {\n            try {\n                let id = this.getCorrectProps().id;\n                if (id && parseInt(id) < this.state.quoteArray.length) {\n                    console.log(\"got from id!\");\n                    this.setState({\n                        quoteObject: quoteArray[id]\n                    });\n                    return;\n                }\n            } catch (e) {\n                console.error(\"invalid id!\");\n            }\n            console.log(\"got random!\");\n            this.setState({\n                quoteObject: quoteArray[Math.floor(Math.random() * this.state.quoteArray.length)]\n            });\n        });\n    }\n\n    getCorrectProps = () => {\n        let params = this.props.location.search;\n        if(!params) {\n            params = {};\n        } else if (typeof params === 'string' || params instanceof String) {\n            params = queryString.parse(params);\n        }\n        return params;\n    };\n\n    getMeta = (quoteObject) => {\n        return (\n            <Helmet>\n                <title>{quoteObject.author + ' says that ...'}</title>\n                <meta\n                    name=\"description\"\n                    content={'“' + quoteObject.quote + '”'}\n                />\n                <meta\n                    property=\"og:title\"\n                    content={quoteObject.author + ' says,'}\n                />\n                <meta\n                    property=\"og:image\"\n                    content={quoteObject.authorImage}\n                />\n            </Helmet>\n        )\n    };\n\n    render() {\n        return(\n            <div className=\"App\" style={{fontFamily: 'Kalam'}}>\n                {/*{this.getMeta(this.state.quoteObject)}*/}\n                <header className=\"App-header\">\n                    {\n                        this.state.quoteObject.authorImage &&\n                        <img src={this.state.quoteObject.authorImage} className=\"App-logo\" alt={this.state.quoteObject.author}/>\n                    }\n                    <p>“{this.state.quoteObject.quote}”</p>\n                    {\n                        this.state.quoteObject.author &&\n                        <span>-{this.state.quoteObject.author}</span>\n                    }\n                    {\n                        this.state.quoteObject.date &&\n                        <span>{this.state.quoteObject.date}</span>\n                    }\n                </header>\n            </div>\n        );\n    }\n}\n\nexport default QuotePage;","import React, {Component} from 'react';\nimport './App.css';\nimport QuotePage from \"./pages/QuotePage\";\nimport {BrowserRouter as Router, Route} from \"react-router-dom\";\n\nclass App extends Component {\n    render() {\n        return (\n            <Router>\n                <div>\n                    <Route path=\"/\" component={QuotePage}/>\n                </div>\n            </Router>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Route, Link, BrowserRouter as Router} from 'react-router-dom'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}